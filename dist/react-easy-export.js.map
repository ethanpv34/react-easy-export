{"version":3,"file":"react-easy-export.js","sources":["../src/export-functions/ExportToCSV.js","../src/export-functions/ExportToExcel.js","../src/export-functions/ExportToPDF.js"],"sourcesContent":["/**\r\n * Exports data as a CSV file.\r\n * @param {Array<Object> | Array<Array<any>>} data - Array of objects or 2D array representing data.\r\n * @param {string} filename - The name of the exported file.\r\n * @param {string} [separator=','] - Separator used between values.\r\n */\r\nconst exportToCSV = (data, filename = 'data.csv', separator = ',') => {\r\n    if (!Array.isArray(data) || !data.length) {\r\n      throw new Error('Invalid data format. Expected an array of objects or a 2D array.');\r\n    }\r\n  \r\n    let headers = [];\r\n    let csvContent = '';\r\n  \r\n    if (typeof data[0] === 'object' && !Array.isArray(data[0])) {\r\n      headers = Object.keys(data[0]);\r\n  \r\n      csvContent += headers.join(separator) + '\\r\\n';\r\n  \r\n      data.forEach(item => {\r\n        const row = headers.map(header => {\r\n          let cell = item[header];\r\n  \r\n          if (typeof cell === 'string' && cell.includes(separator)) {\r\n            cell = `\"${cell}\"`;\r\n          }\r\n          return cell;\r\n        });\r\n  \r\n        csvContent += row.join(separator) + '\\r\\n';\r\n      });\r\n  \r\n    } else if (Array.isArray(data[0])) {\r\n      data.forEach(row => {\r\n        csvContent += row.map(cell => {\r\n          if (typeof cell === 'string' && cell.includes(separator)) {\r\n            cell = `\"${cell}\"`;\r\n          }\r\n          return cell;\r\n        }).join(separator) + '\\r\\n';\r\n      });\r\n  \r\n    } else {\r\n      throw new Error('Invalid data format. Expected an array of objects or a 2D array.');\r\n    }\r\n  \r\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n  \r\n    const link = document.createElement('a');\r\n    const url = URL.createObjectURL(blob);\r\n  \r\n    link.setAttribute('href', url);\r\n    link.setAttribute('download', filename);\r\n    document.body.appendChild(link);\r\n  \r\n    link.click();\r\n  \r\n    document.body.removeChild(link);\r\n    URL.revokeObjectURL(url);\r\n};\r\n\r\n// Example usages:\r\n// exportToCSV([{name: 'Ethan', dob: '03112003'}, {name: 'Jane', dob: '01011999'}], 'people_objects.csv');\r\n// exportToCSV([['Ethan', '03112003'], ['Jane', '01011999']], 'people_array.csv');\r\nexport default exportToCSV;\r\n","/**\r\n * Exports data as an Excel (.xls) file.\r\n * \r\n * @param {Array<Object> | Array<Array<any>>} data - The data to be exported. Can be an array of objects or a 2D array.\r\n * @param {string} [filename='data.xls'] - Optional. The desired filename of the exported file.\r\n * \r\n * Note: This method generates an older Excel format (.xls) using an HTML table. It may not support advanced Excel features.\r\n */\r\nconst exportToExcel = (data, filename = 'data.xls') => {\r\n    if (!Array.isArray(data) || !data.length) {\r\n      throw new Error('Invalid data format. Expected an array of objects or a 2D array.');\r\n    }\r\n  \r\n    let tableContent = '<table border=\"1\">';\r\n  \r\n    if (typeof data[0] === 'object' && !Array.isArray(data[0])) {\r\n      const headers = Object.keys(data[0]);\r\n      tableContent += '<tr>';\r\n      headers.forEach(header => {\r\n        tableContent += `<th>${header}</th>`;\r\n      });\r\n      tableContent += '</tr>';\r\n  \r\n      data.forEach(item => {\r\n        tableContent += '<tr>';\r\n        headers.forEach(header => {\r\n          tableContent += `<td>${item[header] || ''}</td>`;\r\n        });\r\n        tableContent += '</tr>';\r\n      });\r\n  \r\n    } else if (Array.isArray(data[0])) {\r\n      data.forEach(row => {\r\n        tableContent += '<tr>';\r\n        row.forEach(cell => {\r\n          tableContent += `<td>${cell || ''}</td>`;\r\n        });\r\n        tableContent += '</tr>';\r\n      });\r\n    } else {\r\n      throw new Error('Invalid data format. Expected an array of objects or a 2D array.');\r\n    }\r\n  \r\n    tableContent += '</table>';\r\n  \r\n    const uri = 'data:application/vnd.ms-excel;charset=utf-8,' + encodeURIComponent(tableContent);\r\n    const link = document.createElement('a');\r\n    \r\n    link.setAttribute('href', uri);\r\n    link.setAttribute('download', filename);\r\n    document.body.appendChild(link);\r\n    \r\n    link.click();\r\n    \r\n    document.body.removeChild(link);\r\n};\r\n\r\n// Example usages:\r\n// exportToExcel([{name: 'Ethan', dob: '03112003'}, {name: 'Jane', dob: '01011999'}], 'people_objects.xls');\r\n// exportToExcel([['Ethan', '03112003'], ['Jane', '01011999']], 'people_array.xls');\r\nexport default exportToExcel;\r\n","/**\r\n * Exports data as a PDF file using the browser's print functionality.\r\n * @param {string} content - The HTML content to be printed to PDF.\r\n * @param {string} [filename='data.pdf'] - Suggested name of the exported file (though this can't be enforced through the print dialog).\r\n */\r\nconst exportToPDF = (content, filename = 'data.pdf') => {\r\n    const printWindow = window.open('', '_blank');\r\n    \r\n    if (!printWindow) {\r\n      alert('Please allow popups to print content.');\r\n      return;\r\n    }\r\n  \r\n    printWindow.document.write(content);\r\n    printWindow.document.title = filename;\r\n    printWindow.document.close();\r\n    printWindow.onload = function() {\r\n      printWindow.print();\r\n      printWindow.onafterprint = function() {\r\n        printWindow.close();\r\n      };\r\n    };\r\n};\r\n\r\n// Example usage:\r\n// exportToPDF('<h1>Hello, World!</h1>', 'hello.pdf');\r\nexport default exportToPDF;\r\n"],"names":["data","filename","arguments","length","undefined","separator","Array","isArray","Error","headers","csvContent","_typeof","forEach","row","map","cell","includes","concat","join","Object","keys","item","header","blob","Blob","type","link","document","createElement","url","URL","createObjectURL","setAttribute","body","appendChild","click","removeChild","revokeObjectURL","tableContent","uri","encodeURIComponent","content","printWindow","window","open","write","title","close","onload","print","onafterprint","alert"],"mappings":"8TAMoB,SAACA,GAAiD,IAA3CC,EAAQC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,WAAYG,EAASH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,IAC1D,IAAKI,MAAMC,QAAQP,KAAUA,EAAKG,OAChC,MAAM,IAAIK,MAAM,oEAGlB,IAAIC,EAAU,GACVC,EAAa,GAEjB,GAAuB,WAAnBC,EAAOX,EAAK,KAAoBM,MAAMC,QAAQP,EAAK,IAkBhD,KAAIM,MAAMC,QAAQP,EAAK,IAW5B,MAAM,IAAIQ,MAAM,oEAVhBR,EAAKY,SAAQ,SAAAC,GACXH,GAAcG,EAAIC,KAAI,SAAAC,GAIpB,MAHoB,iBAATA,GAAqBA,EAAKC,SAASX,KAC5CU,EAAIE,IAAAA,OAAOF,EAAO,MAEbA,CACR,IAAEG,KAAKb,GAAa,MACvB,GAIF,MA7BEI,EAAUU,OAAOC,KAAKpB,EAAK,IAE3BU,GAAcD,EAAQS,KAAKb,GAAa,OAExCL,EAAKY,SAAQ,SAAAS,GACX,IAAMR,EAAMJ,EAAQK,KAAI,SAAAQ,GACtB,IAAIP,EAAOM,EAAKC,GAKhB,MAHoB,iBAATP,GAAqBA,EAAKC,SAASX,KAC5CU,EAAIE,IAAAA,OAAOF,EAAO,MAEbA,CACT,IAEAL,GAAcG,EAAIK,KAAKb,GAAa,MACtC,IAgBF,IAAMkB,EAAO,IAAIC,KAAK,CAACd,GAAa,CAAEe,KAAM,4BAEtCC,EAAOC,SAASC,cAAc,KAC9BC,EAAMC,IAAIC,gBAAgBR,GAEhCG,EAAKM,aAAa,OAAQH,GAC1BH,EAAKM,aAAa,WAAY/B,GAC9B0B,SAASM,KAAKC,YAAYR,GAE1BA,EAAKS,QAELR,SAASM,KAAKG,YAAYV,GAC1BI,IAAIO,gBAAgBR,EACxB,wBCnDsB,SAAC7B,GAAgC,IAA1BC,EAAQC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,WACpC,IAAKI,MAAMC,QAAQP,KAAUA,EAAKG,OAChC,MAAM,IAAIK,MAAM,oEAGlB,IAAI8B,EAAe,qBAEnB,GAAuB,WAAnB3B,EAAOX,EAAK,KAAoBM,MAAMC,QAAQP,EAAK,IAgBhD,KAAIM,MAAMC,QAAQP,EAAK,IAS5B,MAAM,IAAIQ,MAAM,oEARhBR,EAAKY,SAAQ,SAAAC,GACXyB,GAAgB,OAChBzB,EAAID,SAAQ,SAAAG,GACVuB,UAAYrB,OAAWF,GAAQ,GAAS,QAC1C,IACAuB,GAAgB,OAClB,GAGF,KA1B4D,CAC1D,IAAM7B,EAAUU,OAAOC,KAAKpB,EAAK,IACjCsC,GAAgB,OAChB7B,EAAQG,SAAQ,SAAAU,GACdgB,GAAYrB,OAAAA,OAAWK,EAAa,QACtC,IACAgB,GAAgB,QAEhBtC,EAAKY,SAAQ,SAAAS,GACXiB,GAAgB,OAChB7B,EAAQG,SAAQ,SAAAU,GACdgB,GAAY,OAAArB,OAAWI,EAAKC,IAAW,GAAS,QAClD,IACAgB,GAAgB,OAClB,GAED,CAYDA,GAAgB,WAEhB,IAAMC,EAAM,+CAAiDC,mBAAmBF,GAC1EZ,EAAOC,SAASC,cAAc,KAEpCF,EAAKM,aAAa,OAAQO,GAC1Bb,EAAKM,aAAa,WAAY/B,GAC9B0B,SAASM,KAAKC,YAAYR,GAE1BA,EAAKS,QAELR,SAASM,KAAKG,YAAYV,EAC9B,sBClDoB,SAACe,GAAmC,IAA1BxC,EAAQC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,WAC/BwC,EAAcC,OAAOC,KAAK,GAAI,UAE/BF,GAKLA,EAAYf,SAASkB,MAAMJ,GAC3BC,EAAYf,SAASmB,MAAQ7C,EAC7ByC,EAAYf,SAASoB,QACrBL,EAAYM,OAAS,WACnBN,EAAYO,QACZP,EAAYQ,aAAe,WACzBR,EAAYK,WAVdI,MAAM,wCAaZ"}